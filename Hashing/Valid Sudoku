bool NotRow (vector <string> &A,int row){
    
    set<char> st;
    for(int i=0;i<9;i++){
        
        if(st.find(A[row][i])!= st.end()) return false;
        
        if(A[row][i]!='.'){
            st.insert(A[row][i]);
        }
    }
    return true;
}

bool NotCol (vector <string> &A,int col){
    
    set<char> st;
    for(int i=0;i<9;i++){
        
        if(st.find(A[i][col])!= st.end()) return false;
        
        if(A[i][col]!='.'){
            st.insert(A[i][col]);
        }
    }
    return true;
}

bool NotBox (vector <string> &A,int startRow, int startCol){
    
    set<char> st;
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            char curr = A[startRow+i][startCol+j];
            
            if(st.find(curr)!=st.end()) return false;
        
            if(curr!='.'){
                st.insert(curr);
            }
            
        }
    }
    return true;
}

bool isValid(vector <string> &A,int row, int col){

 return( NotCol(A,col) && NotRow(A,row) && NotBox(A,row-row%3,col-col%3));
 
 }





int Solution::isValidSudoku(const vector<string> &A) {
    
    vector<string> B;
    for(int i=0;i<A.size();i++){
        B.push_back(A[i]);
    }
    for(int row=0;row<9;row++){
        for(int col=0;col<9;col++){
            if(!isValid(B,row,col)) return 0;
        }
    }
    return 1;
}